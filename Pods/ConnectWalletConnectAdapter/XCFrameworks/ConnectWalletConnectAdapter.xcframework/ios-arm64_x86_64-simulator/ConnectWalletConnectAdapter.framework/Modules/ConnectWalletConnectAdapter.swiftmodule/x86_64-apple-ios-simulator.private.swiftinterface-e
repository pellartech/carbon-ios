// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.7.2 (swiftlang-5.7.2.135.5 clang-1400.0.29.51)
// swift-module-flags: -target x86_64-apple-ios13.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -Onone -module-name ConnectWalletConnectAdapter
// swift-module-flags-ignorable: -enable-bare-slash-regex
import CoreImage.CIFilterBuiltins
import ConnectCommon
import CoreImage
import CryptoSwift
import Foundation
import ParticleNetworkBase
import RxCocoa
import RxSwift
import SnapKit
import Swift
import SwiftMessages
import SwiftyJSON
import SwiftyUserDefaults
import UIKit
import WalletConnectSwift
import _Concurrency
import _StringProcessing
@_inheritsConvenienceInitializers public class ZerionConnectAdapter : ConnectWalletConnectAdapter.WalletConnectAdapter {
  override public var walletType: ConnectCommon.WalletType {
    get
  }
  required public init()
  @objc deinit
}
@_inheritsConvenienceInitializers public class MathConnectAdapter : ConnectWalletConnectAdapter.WalletConnectAdapter {
  override public var walletType: ConnectCommon.WalletType {
    get
  }
  required public init()
  @objc deinit
}
@_inheritsConvenienceInitializers public class OmniConnectAdapter : ConnectWalletConnectAdapter.WalletConnectAdapter {
  override public var walletType: ConnectCommon.WalletType {
    get
  }
  required public init()
  @objc deinit
}
@_inheritsConvenienceInitializers public class Inch1ConnectAdapter : ConnectWalletConnectAdapter.WalletConnectAdapter {
  override public var walletType: ConnectCommon.WalletType {
    get
  }
  required public init()
  @objc deinit
}
@_inheritsConvenienceInitializers public class ZengoConnectAdapter : ConnectWalletConnectAdapter.WalletConnectAdapter {
  override public var walletType: ConnectCommon.WalletType {
    get
  }
  required public init()
  @objc deinit
}
@_inheritsConvenienceInitializers public class AlphaConnectAdapter : ConnectWalletConnectAdapter.WalletConnectAdapter {
  override public var walletType: ConnectCommon.WalletType {
    get
  }
  required public init()
  @objc deinit
}
@_inheritsConvenienceInitializers public class BitpieConnectAdapter : ConnectWalletConnectAdapter.WalletConnectAdapter {
  override public var walletType: ConnectCommon.WalletType {
    get
  }
  required public init()
  @objc deinit
}
@_inheritsConvenienceInitializers public class BitkeepConnectAdapter : ConnectWalletConnectAdapter.WalletConnectAdapter {
  override public var walletType: ConnectCommon.WalletType {
    get
  }
  required public init()
  @objc deinit
}
@_inheritsConvenienceInitializers public class MetaMaskConnectAdapter : ConnectWalletConnectAdapter.WalletConnectAdapter {
  override public var walletType: ConnectCommon.WalletType {
    get
  }
  required public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers public class SessionNotify {
  public var sessionDeleted: RxRelay.BehaviorRelay<Swift.Bool>
  @objc deinit
}
open class WalletConnectAdapter : ConnectCommon.ConnectAdapter {
  open var walletType: ConnectCommon.WalletType {
    get
  }
  required public init()
  open var readyState: ConnectCommon.WalletReadyState {
    get
  }
  public func getAccounts() -> [ConnectCommon.Account]
  public func connect<T>(_ config: T? = nil) -> RxSwift.Single<ConnectCommon.Account?> where T : ConnectCommon.ConnectConfig
  public func isConnected(publicAddress: Swift.String) -> Swift.Bool
  public func disconnect(publicAddress: Swift.String) -> RxSwift.Single<Swift.String>
  public func signAndSendTransaction(publicAddress: Swift.String, transaction: Swift.String) -> RxSwift.Single<Swift.String>
  public func signAllTransactions(publicAddress: Swift.String, transactions: [Swift.String]) -> RxSwift.Single<[Swift.String]>
  public func signTransaction(publicAddress: Swift.String, transaction: Swift.String) -> RxSwift.Single<Swift.String>
  public func signMessage(publicAddress: Swift.String, message: Swift.String) -> RxSwift.Single<Swift.String>
  public func handleUrl(_ url: Foundation.URL) -> Swift.Bool
  public func signTypeData(publicAddress: Swift.String, data: Swift.String) -> RxSwift.Single<Swift.String>
  public func connectWithQrCode(from: UIKit.UIViewController) -> RxSwift.Single<ConnectCommon.Account?>
  public func getConnectionUrl() -> (Swift.String, RxSwift.Single<ConnectCommon.Account?>)
  public func request(publicAddress: Swift.String, method: Swift.String, parameters: [Swift.Encodable]) -> RxSwift.Single<SwiftyJSON.JSON?>
  public func addEthereumChain(publicAddress: Swift.String, chainId: Swift.Int, chainName: Swift.String? = nil, nativeCurrency: ConnectCommon.NativeCurrency?, rpcUrl: Swift.String?, blockExplorerUrl: Swift.String?) -> RxSwift.Single<Swift.String>
  public func switchEthereumChain(publicAddress: Swift.String, chainId: Swift.Int) -> RxSwift.Single<Swift.String>
  @objc deinit
}
extension ConnectWalletConnectAdapter.WalletConnectAdapter : WalletConnectSwift.ClientDelegate {
  public func client(_ client: WalletConnectSwift.Client, didFailToConnect url: WalletConnectSwift.WCURL)
  public func client(_ client: WalletConnectSwift.Client, didConnect url: WalletConnectSwift.WCURL)
  public func client(_ client: WalletConnectSwift.Client, didConnect session: WalletConnectSwift.Session)
  public func client(_ client: WalletConnectSwift.Client, didDisconnect session: WalletConnectSwift.Session)
  public func client(_ client: WalletConnectSwift.Client, didUpdate session: WalletConnectSwift.Session)
  public func reconnectIfNeeded(publicAddress: Swift.String)
}
extension WalletConnectSwift.Client.Transaction {
  public func serialize() throws -> Swift.String
}
@_inheritsConvenienceInitializers public class ImtokenConnectAdapter : ConnectWalletConnectAdapter.WalletConnectAdapter {
  override public var walletType: ConnectCommon.WalletType {
    get
  }
  required public init()
  @objc deinit
}
@_inheritsConvenienceInitializers public class TrustConnectAdapter : ConnectWalletConnectAdapter.WalletConnectAdapter {
  override public var walletType: ConnectCommon.WalletType {
    get
  }
  required public init()
  @objc deinit
}
@_inheritsConvenienceInitializers public class RainbowConnectAdapter : ConnectWalletConnectAdapter.WalletConnectAdapter {
  override public var walletType: ConnectCommon.WalletType {
    get
  }
  required public init()
  @objc deinit
}
extension WalletConnectSwift.Session : Swift.Equatable {
  public static func == (lhs: WalletConnectSwift.Session, rhs: WalletConnectSwift.Session) -> Swift.Bool
}
@_inheritsConvenienceInitializers public class GnosisConnectAdapter : ConnectWalletConnectAdapter.WalletConnectAdapter {
  override public var walletType: ConnectCommon.WalletType {
    get
  }
  required public init()
  @objc deinit
}
